% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare-git.R
\name{compare_git}
\alias{compare_git}
\alias{compare_with_git}
\alias{compare_git_revisions}
\alias{compare_active_file_with_git}
\alias{compare_project_with_git}
\alias{compare_project_git_revisions}
\title{Git comparison}
\usage{
compare_with_git(path = NULL, revision = "HEAD", prompt = FALSE)

compare_git_revisions(
  path = NULL,
  revision_compare = "HEAD",
  revision_against = "@{upstream}",
  prompt = FALSE
)

compare_active_file_with_git(prompt = TRUE)

compare_project_with_git(prompt = TRUE)

compare_project_git_revisions(prompt = TRUE)
}
\arguments{
\item{path}{Path to a specific file or directory to be compared. If \code{NULL},
the whole repository is compared.}

\item{revision}{The Git revision to compare against (see 'Details'). The
default refers to the last commit (\code{HEAD}).}

\item{prompt}{Whether to prompt for revisions via \code{\link[=showPrompt]{showPrompt()}}, using the
provided values as defaults.}

\item{revision_compare, revision_against}{The Git revisions to compare
(\code{revision_compare} vs. \code{revision_against}) (see 'Details'). With default
values, the last commit (\code{HEAD}) is compared against the upstream remote for
the current branch (\verb{@\{upstream\}}).}
}
\value{
Invisibly returns the result of calling \verb{git difftool} via
\code{\link[sys:exec]{sys::exec_background()}}.
}
\description{
Compare the local working copy against a Git revision, or the changes between
arbitrary Git revisions. Revisions can be specified as "HEAD", branch names,
commit SHA, etc. (see 'Details' below).
}
\details{
The functionality is based on
\href{https://git-scm.com/docs/git-difftool}{\verb{git difftool}} using
\href{http://meldmerge.org/}{Meld} as external diff tool. Revision arguments can
be specified in a number of ways, see
'\href{https://git-scm.com/docs/gitrevisions#_specifying_revisions}{Specifying revisions}'
in the Git documentation.

In particular, the following are relevant revision specifications:
\itemize{
\item \code{HEAD}: The last commit.
\item \verb{<sha>}: The hexadecimal SHA of any commit.
\item \verb{<branch>}, \verb{<tag>}: The name of a branch or tag, e.g. \code{main},\code{master},
\code{v1.0.1}.
\item \verb{@\{upstream\}}, \verb{@\{u\}}: The upstream remote of the current branch.
\item \verb{<branch>@\{upstream\}}, \verb{<branch>@\{u\}}: The upstream remote of \verb{<branch>},
e.g. \verb{main@\{u\}}.
\item \verb{<revision>~<n>}: \verb{<n>} commits before any specified \verb{<revision>}, e.g.
\code{HEAD~1}, \code{main~1}.
}
}
\section{Functions}{
\itemize{
\item \code{compare_with_git}: Compares the local working copy against a specific Git revision.

\item \code{compare_git_revisions}: Compares changes between arbitrary Git revisions.

\item \code{compare_active_file_with_git}: Compares the local working copy against a specific Git revision for the active file.

\item \code{compare_project_with_git}: Compares the local working copy against a specific Git revision for the active project.

\item \code{compare_project_git_revisions}: Compares changes between arbitrary Git revisions for the active project.
}}

\examples{
\dontrun{
  # compare working copy with the last commit (HEAD)
  compare_with_git()
  # compare working copy of a given path with the last commit
  compare_with_git("path/to/compare")
  # compare working copy of the current directory with the last commit
  compare_with_git(getwd())
  # compare working copy of a specific file with the last commit
  compare_with_git("bar/foo.file")
  # compare working copy, prompting for the revision to compare with
  compare_with_git(prompt = TRUE)
  # compare working copy with branch "main"
  compare_with_git(revision = "main")
  # compare working copy with the current upstream remote
  compare_with_git(revision = "@{upstream}")
  # compare working copy with the second-last commit
  compare_with_git(revision = "HEAD~1")

  # compare last commit (HEAD) against current upstream remote (default)
  compare_git_revisions()
  # compare last commit against current upstream remote for a given path
  compare_git_revisions("path/to/compare")
  # prompt for the revisions to compare
  compare_git_revisions(prompt = TRUE)
  # compare last commit against "main" branch
  compare_git_revisions(revision_against = "main")
  # compare last commit against "main" branch
  compare_git_revisions(revision_against = "main")
  # compare last commit against previous commit for a given path
  compare_git_revisions("path/to/compare", "HEAD", "HEAD~1")
  # compare local "master" branch against the upstream remote for a give path
  compare_git_revisions("path/to/compare", "master", "master@{upstream}")

  # compare active file, prompting for the revision to compare against
  compare_active_file_with_git()
  # compare active project, prompting for the revision to compare against
  compare_project_with_git()
  # prompt for the revisions to compare for the active project
  compare_active_file_with_git()
}
}
\seealso{
\link[=compareWith-addins]{RStudio addins} for file and project comparison
with support for version control.
}
