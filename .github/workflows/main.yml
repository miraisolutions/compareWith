# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ${{ matrix.config.os-name }}-${{ matrix.config.os-version }}
    name: >-
      ${{ matrix.config.os-name }}-${{ matrix.config.os-version }}
      R ${{ matrix.config.r-version}}
    strategy:
      matrix:
        config:
          - os-name: ubuntu
            os-version: latest
            r-version: oldrel
          - os-name: ubuntu
            os-version: "20.04"
            r-version: release
          - os-name: ubuntu
            os-version: "20.04"
            r-version: devel
          - os-name: ubuntu
            os-version: "20.04"
            r-version: 3.6
    # Steps represent a sequence of tasks that will be executed as part of the job
    env:
      DISPLAY: :0
    steps:
      - uses: actions/checkout@v2

      - name: Set up R ${{ matrix.config.r-version }}
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r-version }}

      - name: Install tinytex
        if: matrix.config.vignettes
        uses: r-lib/actions/setup-tinytex@v1
      - name: Setup xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          # start xvfb in the background
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 &

      #
      # name: Run headless test
      #   uses: actions/xvfb-action@v1
      #   with:
      #     run: npm test
      #     working-directory: ./
      # - name: Install Meld
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y meld
      #     while read -r cmd
      #     do
      #       eval sudo $cmd
      #     done < <(Rscript -e 'writeLines(remotes::system_requirements("${{ matrix.config.os-name }}", "${{ matrix.config.os-version }}"))')
      - name: Install dependencies
        run: |
          install.packages(c("remotes", "rcmdcheck"))
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}
      - name: Check
        run: rcmdcheck::rcmdcheck(args = "--no-manual", error_on = "error")
        shell: Rscript {0}
